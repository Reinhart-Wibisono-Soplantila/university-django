from rest_framework import serializers
from .models import Building, Room
from app_common.serializers import FacultySerializer
from app_common.models import Faculty

# class BuildingSerializerGet(serializers.ModelSerializer):
#     faculty= FacultySerializer(read_only=True)
#     class Meta:
#         model=Building
#         fields='__all__'

# class BuildingSerializer(serializers.ModelSerializer):
#     faculty_id = serializers.IntegerField(  # Input ID
#         required=False,
#         allow_null=True
#     )
#     class Meta:
#         model=Building
#         fields=['building_name', 'faculty_id', 'address', 'is_public']
    
#     def to_representation(self, instance):
#         rep=super().to_representation(instance)
#         rep['faculty']=FacultySerializer(instance.faculty).data
#         return rep

# Gabungan untuk Read dan Write method
class BuildingSerializer(serializers.ModelSerializer):
    faculty_id = serializers.IntegerField(
        write_only=True,
        required=False,
        allow_null=True,
        # help_text="ID faculty (nullable)"
    )
    faculty = FacultySerializer(read_only=True)  # Untuk response
    
    class Meta:
        model = Building
        fields = '__all__'
        # extra_kwargs = {
        #     'faculty': {'help_text': 'Autogenerated from faculty_id'},  # Dokumentasi
        # }
        
    def validate_faculty_id(self, value):
        if value is None:
            return None
            
        if not Faculty.objects.filter(id=value).exists():
            raise serializers.ValidationError("Faculty dengan ID ini tidak valid")
        return value

class RoomSerializerGet(serializers.ModelSerializer):
    # building=BuildingSerializerGet(read_only=True)
    class Meta:
        model=Room
        fields='__all__'

class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model=Room
        fields='__all__'